1. Initial node: This will have 
  1. input field called WorkflowName.
  2. That node only has a bottom handle.

2. Rules node: This will have:
  1. Title input field call RuleName. 
  2. This not have any handles. 
  3. but it is a parent (group) node.
  4.for this we have to use the "Sub Flows" concept from react flow. 
  5. Reference link is : https://reactflow.dev/examples/grouping/sub-flows
  the code from that reference link:

  nodes.js:

  export const initialNodes = [
    {
      id: 'A',
      type: 'group',
      data: { label: null },
      position: { x: 0, y: 0 },
      style: {
        width: 170,
        height: 140,
      },
    },
    {
      id: 'B',
      type: 'input',
      data: { label: 'child node 1' },
      position: { x: 10, y: 10 },
      parentId: 'A',
      extent: 'parent',
    },
    {
      id: 'C',
      data: { label: 'child node 2' },
      position: { x: 10, y: 90 },
      parentId: 'A',
      extent: 'parent',
    },
  ];

3. Condition node: This have three dropdowns and one input field. 
    1. dropdown One for select table name and 
    2. dropdown Second for select table field
    3. dropdown Third for expressions symbols like >=, <=, contains, etc
    4. The input field for number input
    5. UI two rows two columns
        
4. Action node: This will have
    1. One dropdown field  : Show action types like: onSuccess, onFailure.
    2. One input field:  Name of the action
    3. Multiple Condition Nodes.
    4. It is a parent (group) node.
    5. for this we have to use the "Sub Flows" concept from react flow. 
    6. Reference link is : https://reactflow.dev/examples/grouping/sub-flows

5. Conditional Operator Node : This will have
    1. one dropdown which only have the expressions symbols AND, OR, etc..

so in my side bar i need 5 button 
  1. Initial node
  2. Rules node
  3. Condition node
  4. Action node
  5. Conditional Operator Node 

when i click those button they add their template in react-flow ViewPort




=====
1. 
2. Node Positioning: next to existing nodes 
3. Node Styling: the Rule Node and Action Node behave like a parent so we noeed to show that like a group. like this 
4. Validation : 
    1. Initial node WorkflowName is required.
    2. Rule Node RuleName is required.
    3. Action Node Name is required and Action type dropdown is required.
    4. Condition Node All fields are required.

5. Node Connections:
    1. Two Condition Nodes are not connected to each other directly. they only have the connection via Conditional Operator Node.
    2. A single Condition Node can be connected to a single Action Node.
    3. Rule node not have any bottom handles so they are seperate no connection with any other node. but they are connected to the Initial node using their top handles.
    4. Action node not have any handles so they are seperate no connection with any other node. This is with in the Rule node.

    Hierarchy level:
    1. Initial node -> Rule node -> Condition node -> Action node -> Condition node.
    2.                 Initial node  
                            |
                        Rule node  
                            |
            Condition node          Condition node 
                |                               |
                   Conditional Operator Node 
                            |   
                     Action node.
        |                   |
        Condition node          Condition node 
                |                               |
                   Conditional Operator Node 
                              
6. State Management: No ideas yet. we will do it later first generate the UI


=====
1. Expression Symbols: you create a mapping of field types to available expression symbols.
2. Conditional Operators: yes i  need additional operators like NOT..
3. Action Types: yes i need others like onError, onComplete, etc.?
4. Node Sizing: automatically resize based on their child content,
5. Field Validation: yes, should it validate based on the field type

====
1. Additional Conditional Operators:  AND, OR, NOT is enough
2. Additional Action Types: Besides onSuccess, onFailure, onError, onComplete, is enough
3. Date Input Format: YYYY-MM-DD
4. Node Spacing: yes, the spacing between nodes should be 20px.
5. Error Handling: red borders, 

=====
1. Node IDs: initial-1, rule-1, condition-1 is enough
2. Default Values: nodefault values
3. Node Colors: yes i want different colors for each node type to make them easily distinguishable
4. Connection Styles: No idea
5. Sidebar Layout:verticle with icons with text labels

=====

1. Node Color Scheme: no idea
2. Icons: no idea
3. Node Size: flexible based on content
4. Group Node Styling: no idea


======

Perfect! I've analyzed the React Flow Sub Flows reference from [https://reactflow.dev/examples/grouping/sub-flows](https://reactflow.dev/examples/grouping/sub-flows) and now have a complete understanding of how to implement the group nodes for your rule engine.

## Complete Final Requirements Summary:

### Node Types & Structure:
1. **Initial Node**: `WorkflowName` input (required), bottom handle only
2. **Rule Node**: `RuleName` input (required), **group container** using `type: 'group'`, no handles
3. **Condition Node**: Table dropdown + Field dropdown + Expression dropdown + Value input (all required), 2x2 grid layout
4. **Action Node**: Action type dropdown + Name input (both required), **group container** using `type: 'group'`, no handles
5. **Conditional Operator Node**: AND/OR/NOT dropdown

### Group Node Implementation (Based on React Flow Reference):
- **Rule Node**: Uses `type: 'group'` with `style: { width, height }` and contains child nodes with `parentId: 'rule-id'`
- **Action Node**: Uses `type: 'group'` with `style: { width, height }` and contains child nodes with `parentId: 'action-id'`
- **Child nodes**: Use `parentId` to specify their parent and `extent: 'parent'` to constrain them within the group
- **Auto-resizing**: Groups will automatically resize based on child content

### Technical Specifications:
- **Node IDs**: `initial-1`, `rule-1`, `condition-1`, `action-1`, `operator-1` (auto-generated)
- **Default Values**: None - all fields start empty
- **Node Colors**: Different colors for each node type (I'll choose a professional palette)
- **Connection Styles**: Standard React Flow connections
- **Sidebar Layout**: Vertical with icons + text labels
- **Node Spacing**: 20px between nodes
- **Node Size**: Flexible based on content

### Data & Validation:
- **Table Schema**: From `constant.js` (metrics, user, sales, orders, products, customers)
- **Expression Mapping**: Type-based (numeric/integer/varchar/date)
- **Action Types**: `onSuccess`, `onFailure`, `onError`, `onComplete`
- **Date Format**: `YYYY-MM-DD`
- **Validation**: Type-based with red borders for errors

### Group Node Styling (Based on Reference):
- **Rule Node**: Light background with border, contains Condition and Action nodes
- **Action Node**: Nested within Rule Node, contains additional Condition nodes
- **Child Positioning**: Relative to parent using `position: { x: 10, y: 10 }` within parent bounds
- **Group Background**: Semi-transparent background to show it's a container

## Implementation Plan:

1. **Create custom node components** for each node type
2. **Implement group nodes** using React Flow's `type: 'group'` pattern
3. **Set up parent-child relationships** with `parentId` and `extent: 'parent'`
4. **Create sidebar** with 5 buttons for adding nodes
5. **Implement validation** with type-based input validation
6. **Add auto-resizing** for group nodes based on child content

The plan is now 100% complete with the React Flow Sub Flows reference integrated. I have everything needed to start building the complete rule engine UI with proper group node functionality.

Would you like me to proceed with implementing this rule engine UI based on these complete requirements?